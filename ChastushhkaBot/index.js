const TelegramApi = require('node-telegram-bot-api')
const gTTS = require('gtts')
const fs = require('fs')
const path = require('path')
const ffmpeg = require('fluent-ffmpeg')
const ffmpegPath = require('ffmpeg-static')

const token = '7326293550:AAG73aSy1swxcmyq1_eq4d1eZdXS8TVxPfk'
const bot = new TelegramApi(token, { polling: true })

const processingQueue = new Set()

function removeSpecialCharacters(text) {
	return text.replace(/[^–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s.,!?-]/gi, '')
}

const SkeletBota = () => {
	bot.setMyCommands([{ command: '/start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞' }])

	bot.on('message', async msg => {
		const chatId = msg.chat.id
		const messageId = msg.message_id
		const text = msg.text

		const processKey = `${chatId}_${messageId}`

		if (processingQueue.has(processKey)) {
			return
		}

		processingQueue.add(processKey)

		let audioFile, processedAudio, outputFile
		let processingMessage = null

		try {
			if (text === '/start') {
				await bot.sendMessage(
					chatId,
					'üéµ –ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Å—Ç—É—à–∫–∞ –±–æ—Ç\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –æ—Ç 90 –¥–æ 110 —Å–∏–º–≤–æ–ª–æ–≤, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —á–∞—Å—Ç—É—à–∫—É!'
				)

				const exampleAudio = path.join(__dirname, 'Chastushka_example.mp3')
				if (fs.existsSync(exampleAudio)) {
					await bot.sendAudio(chatId, exampleAudio)
				} else {
					console.warn('–ü—Ä–∏–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
				}
				return
			}

			if (!text || text.startsWith('/')) {
				return
			}

			if (text.length < 90) {
				await bot.sendMessage(
					chatId,
					'–¢–≤–æ–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - 90 —Å–∏–º–≤–æ–ª–æ–≤'
				)
				return
			}
			if (text.length > 110) {
				await bot.sendMessage(
					chatId,
					'–¢–≤–æ–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - 110 —Å–∏–º–≤–æ–ª–æ–≤.'
				)
				return
			}

			const cleanedText = removeSpecialCharacters(text)
			if (!cleanedText.trim()) {
				await bot.sendMessage(
					chatId,
					'–ë–æ—Ç –Ω–µ –æ–∑–≤—É—á–∏–≤–∞–µ—Ç —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
				)
				return
			}

			processingMessage = await bot.sendMessage(
				chatId,
				'–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ —á–∞—Å—Ç—É—à–∫–æ–π ‚åõ',
				{ reply_to_message_id: messageId }
			)

			const timestamp = Date.now()
			audioFile = path.join(__dirname, `audio_${timestamp}.mp3`)
			processedAudio = path.join(__dirname, `processed_${timestamp}.mp3`)
			outputFile = path.join(__dirname, `–ß–∞—Å—Ç—É—à–∫–∞.mp3`)
			const musicFile = path.join(__dirname, 'background.mp3')

			await new Promise((resolve, reject) => {
				new gTTS(cleanedText, 'ru').save(audioFile, err =>
					err ? reject(err) : resolve()
				)
			})

			await new Promise((resolve, reject) => {
				ffmpeg(audioFile)
					.setFfmpegPath(ffmpegPath)
					.audioFilters('adelay=10000|10000,volume=7,atempo=1.32')
					.on('error', reject)
					.on('end', resolve)
					.save(processedAudio)
			})

			fs.unlinkSync(audioFile)

			await new Promise((resolve, reject) => {
				ffmpeg()
					.setFfmpegPath(ffmpegPath)
					.input(musicFile)
					.input(processedAudio)
					.complexFilter([
						'[0:a]volume=0.7[bg]',
						'[1:a]volume=1.3[voice]',
						'[bg][voice]amix=inputs=2:duration=longest',
					])
					.on('error', reject)
					.on('end', resolve)
					.save(outputFile)
			})
			fs.unlinkSync(processedAudio)

			if (processingMessage) {
				await bot.deleteMessage(chatId, processingMessage.message_id)
			}

			await bot.sendAudio(chatId, outputFile)
		} catch (error) {
			console.error(error)
			if (processingMessage) {
				await bot
					.deleteMessage(chatId, processingMessage.message_id)
					.catch(e => console.error(e))
			}
			await bot.sendMessage(
				chatId,
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
			)
		} finally {
			try {
				if (audioFile && fs.existsSync(audioFile)) fs.unlinkSync(audioFile)
				if (processedAudio && fs.existsSync(processedAudio))
					fs.unlinkSync(processedAudio)
				if (outputFile && fs.existsSync(outputFile)) fs.unlinkSync(outputFile)
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', err)
			}

			processingQueue.delete(processKey)
		}
	})
}

SkeletBota()